[{"/Users/eitatachino/Desktop/stripe-react/src/index.js":"1","/Users/eitatachino/Desktop/stripe-react/src/App.js":"2","/Users/eitatachino/Desktop/stripe-react/src/reportWebVitals.js":"3","/Users/eitatachino/Desktop/stripe-react/src/Checkout.js":"4","/Users/eitatachino/Desktop/stripe-react/src/Payments.js":"5","/Users/eitatachino/Desktop/stripe-react/src/Customers.js":"6","/Users/eitatachino/Desktop/stripe-react/src/Subscriptions.js":"7","/Users/eitatachino/Desktop/stripe-react/src/firebase.js":"8","/Users/eitatachino/Desktop/stripe-react/src/helpers.js":"9"},{"size":1300,"mtime":1612405040598,"results":"10","hashOfConfig":"11"},{"size":3260,"mtime":1612441227947,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610072654214,"results":"13","hashOfConfig":"14"},{"size":2207,"mtime":1612317283591,"results":"15","hashOfConfig":"11"},{"size":3540,"mtime":1612752935246,"results":"16","hashOfConfig":"11"},{"size":4022,"mtime":1612752929903,"results":"17","hashOfConfig":"11"},{"size":5660,"mtime":1612401304073,"results":"18","hashOfConfig":"11"},{"size":552,"mtime":1612405077919,"results":"19","hashOfConfig":"11"},{"size":696,"mtime":1611756299654,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"nhpgew",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bdbq7n",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/eitatachino/Desktop/stripe-react/src/index.js",[],["42","43"],"/Users/eitatachino/Desktop/stripe-react/src/App.js",[],"/Users/eitatachino/Desktop/stripe-react/src/reportWebVitals.js",[],["44","45"],"/Users/eitatachino/Desktop/stripe-react/src/Checkout.js",[],"/Users/eitatachino/Desktop/stripe-react/src/Payments.js",[],"/Users/eitatachino/Desktop/stripe-react/src/Customers.js",["46"],"/Users/eitatachino/Desktop/stripe-react/src/Subscriptions.js",["47"],"import React, { useState, useEffect, Suspense } from 'react'\nimport { fetchFromAPI } from './helpers'\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\nimport { useUser, AuthCheck } from 'reactfire'\n\nimport { db } from './firebase'\nimport { SignIn, SignOut } from './Customers'\n\nfunction UserData(props) {\n  const [data, setData] = useState({})\n\n  // Subscribe to the user's data in Firestore\n  useEffect(() => {\n    const unsubscribe = db\n      .collection('users')\n      .doc(props.user.uid)\n      .onSnapshot((doc) => setData(doc.data()))\n    return () => unsubscribe()\n  }, [props.user])\n\n  return (\n    <pre>\n      Stripe Customer ID: {data.stripeCustomerId} <br />\n      Subscriptions: {JSON.stringify(data.activePlans || [])}\n    </pre>\n  )\n}\n\nfunction SubscribeToPlan(props) {\n  const stripe = useStripe()\n  const elements = useElements()\n  const user = useUser()\n\n  const [plan, setPlan] = useState()\n  const [subscriptions, setSubscriptions] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  // Get current subscriptions on mount\n  useEffect(() => {\n    getSubscriptions()\n  }, [user])\n\n  // Fetch current subscriptions from the API\n  const getSubscriptions = async () => {\n    if (user) {\n      const subs = await fetchFromAPI('subscriptions', { method: 'GET' })\n      setSubscriptions(subs)\n    }\n  }\n\n  // Cancel a subscription\n  const cancel = async (id) => {\n    setLoading(true)\n    await fetchFromAPI('subscriptions/' + id, { method: 'PATCH' })\n    alert('canceled!')\n    await getSubscriptions()\n    setLoading(false)\n  }\n\n  // Handle the submission of card details\n  const handleSubmit = async (event) => {\n    setLoading(true)\n    event.preventDefault()\n\n    const cardElement = elements.getElement(CardElement)\n\n    // Create Payment Method\n    const { paymentMethod, error } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    })\n\n    if (error) {\n      alert(error.message)\n      setLoading(false)\n      return\n    }\n\n    // Create Subscription on the Server\n    const subscription = await fetchFromAPI('subscriptions', {\n      body: {\n        plan,\n        payment_method: paymentMethod.id,\n      },\n    })\n\n    // The subscription contains an invoice\n    // If the invoice's payment succeeded then you're good,\n    // otherwise, the payment intent must be confirmed\n\n    const { latest_invoice } = subscription\n\n    if (latest_invoice.payment_intent) {\n      const { client_secret, status } = latest_invoice.payment_intent\n\n      if (status === 'requires_action') {\n        const { error: confirmationError } = await stripe.confirmCardPayment(\n          client_secret\n        )\n        if (confirmationError) {\n          console.error(confirmationError)\n          alert('unable to confirm card')\n          return\n        }\n      }\n\n      // success\n      alert('You are subscribed!')\n      getSubscriptions()\n    }\n\n    setLoading(false)\n    setPlan(null)\n  }\n\n  return (\n    <>\n      <h2>Subscriptions</h2>\n      <p>\n        Subscribe a user to a recurring plan, process the payment, and sync with\n        Firestore in realtime.\n      </p>\n      <AuthCheck fallback={<SignIn />}>\n        <div className='well'>\n          <h2>Firestore Data</h2>\n          <p>User's data in Firestore.</p>\n          {user?.uid && <UserData user={user} />}\n        </div>\n\n        <hr />\n\n        <div className='well'>\n          <h3>Step 1: Choose a Plan</h3>\n\n          <button\n            className={\n              'btn ' +\n              (plan === 'price_1ICGrfBtWDnvAXit1BICwiVz'\n                ? 'btn-primary'\n                : 'btn-outline-primary')\n            }\n            onClick={() => setPlan('price_1ICGrfBtWDnvAXit1BICwiVz')}\n          >\n            Choose Monthly ¥2500/月\n          </button>\n\n          <button\n            className={\n              'btn ' +\n              (plan === 'price_1ICGrfBtWDnvAXitYSPzmqCt'\n                ? 'btn-primary'\n                : 'btn-outline-primary')\n            }\n            onClick={() => setPlan('price_1ICGrfBtWDnvAXitYSPzmqCt')}\n          >\n            Choose Quarterly ¥5000/3ヶ月\n          </button>\n\n          <p>\n            Selected Plan: <strong>{plan}</strong>\n          </p>\n        </div>\n        <hr />\n\n        <form onSubmit={handleSubmit} className='well' hidden={!plan}>\n          <h3>Step 2: Submit a Payment Method</h3>\n          <p>Collect credit card details</p>\n          <p>\n            Normal Card: <code>4242424242424242</code>\n          </p>\n          <p>\n            3D Secure Card: <code>4000002500003155</code>\n          </p>\n\n          <hr />\n\n          <CardElement />\n          <button className='btn btn-success' type='submit' disabled={loading}>\n            Subscribe & Pay\n          </button>\n        </form>\n\n        <div className='well'>\n          <h3>Manage Current Subscriptions</h3>\n          <div>\n            {subscriptions.map((sub) => (\n              <div key={sub.id}>\n                {sub.id}. Next payment of {sub.plan.amount} due{' '}\n                {new Date(sub.current_period_end * 1000).toUTCString()}\n                <button\n                  className='btn btn-sm btn-danger'\n                  onClick={() => cancel(sub.id)}\n                  disabled={loading}\n                >\n                  Cancel\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className='well'>\n          <SignOut user={user} />\n        </div>\n      </AuthCheck>\n    </>\n  )\n}\n\nexport default function Subscriptions() {\n  return (\n    <Suspense fallback={'loading user'}>\n      <SubscribeToPlan />\n    </Suspense>\n  )\n}\n","/Users/eitatachino/Desktop/stripe-react/src/firebase.js",[],"/Users/eitatachino/Desktop/stripe-react/src/helpers.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":49,"column":6,"nodeType":"56","endLine":49,"endColumn":12,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":41,"column":6,"nodeType":"56","endLine":41,"endColumn":12,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWallet'. Either include it or remove the dependency array.","ArrayExpression",["62"],"React Hook useEffect has a missing dependency: 'getSubscriptions'. Either include it or remove the dependency array.",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [getWallet, user]",{"range":"68","text":"69"},"Update the dependencies array to be: [getSubscriptions, user]",{"range":"70","text":"71"},[1221,1227],"[getWallet, user]",[1132,1138],"[getSubscriptions, user]"]